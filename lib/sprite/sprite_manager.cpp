#include "sprite/sprite_manager.h"

using namespace hfh3;

// Since we are used a palette indexed frame buffer,
// we initialize the palette with the following values.
// Todo: Allow defining the palette externally
static const u32 palette[256] = {
    0x00000000, 0x0000ff00, 0x00ff0000, 0x00ffff00,
    0xff000000, 0xff00ff00, 0xffff0000, 0xbbbbbb00,
    0x88888800, 0x0000aa00, 0x00aa0000, 0x00aaaa00,
    0xaa000000, 0xaa00aa00, 0xaaaa0000, 0x00000000,
    0xffffff00, 0xededed00, 0xdddddd00, 0xcccccc00,
    0xbababa00, 0xaaaaaa00, 0x99999900, 0x87878700,
    0x77777700, 0x66666600, 0x54545400, 0x44444400,
    0x33333300, 0x21212100, 0x11111100, 0xdddddd00,
    0x0000ff00, 0x1100ff00, 0x2100ff00, 0x3300ff00,
    0x4400ff00, 0x5400ff00, 0x6600ff00, 0x7700ff00,
    0x8700ff00, 0x9900ff00, 0xaa00ff00, 0xba00ff00,
    0xcc00ff00, 0xdd00ff00, 0xed00ff00, 0xff00ff00,
    0xff00ed00, 0xff00dd00, 0xff00cc00, 0xff00ba00,
    0xff00aa00, 0xff009900, 0xff008700, 0xff007700,
    0xff006600, 0xff005400, 0xff004400, 0xff003300,
    0xff002100, 0xff001100, 0xff000000, 0xff110000,
    0xff210000, 0xff330000, 0xff440000, 0xff540000,
    0xff660000, 0xff770000, 0xff870000, 0xff990000,
    0xffaa0000, 0xffba0000, 0xffcc0000, 0xffdd0000,
    0xffed0000, 0xffff0000, 0xedff0000, 0xddff0000,
    0xccff0000, 0xbaff0000, 0xaaff0000, 0x99ff0000,
    0x87ff0000, 0x77ff0000, 0x66ff0000, 0x54ff0000,
    0x44ff0000, 0x33ff0000, 0x21ff0000, 0x11ff0000,
    0x00ff0000, 0x00ff1100, 0x00ff2100, 0x00ff3300,
    0x00ff4400, 0x00ff5400, 0x00ff6600, 0x00ff7700,
    0x00ff8700, 0x00ff9900, 0x00ffaa00, 0x00ffba00,
    0x00ffcc00, 0x00ffdd00, 0x00ffed00, 0x00ffff00,
    0x00edff00, 0x00ddff00, 0x00ccff00, 0x00baff00,
    0x00aaff00, 0x0099ff00, 0x0087ff00, 0x0077ff00,
    0x0066ff00, 0x0054ff00, 0x0044ff00, 0x0033ff00,
    0x0021ff00, 0x0011ff00, 0x0000ba00, 0x1100ba00,
    0x2100ba00, 0x3300ba00, 0x4400ba00, 0x5400ba00,
    0x6600ba00, 0x7700ba00, 0x8700ba00, 0x9900ba00,
    0xaa00ba00, 0xba00ba00, 0xba00aa00, 0xba009900,
    0xba008700, 0xba007700, 0xba006600, 0xba005400,
    0xba004400, 0xba003300, 0xba002100, 0xba001100,
    0xba000000, 0xba110000, 0xba210000, 0xba330000,
    0xba440000, 0xba540000, 0xba660000, 0xba770000,
    0xba870000, 0xba990000, 0xbaaa0000, 0xbaba0000,
    0xaaba0000, 0x99ba0000, 0x87ba0000, 0x77ba0000,
    0x66ba0000, 0x54ba0000, 0x44ba0000, 0x33ba0000,
    0x21ba0000, 0x11ba0000, 0x00ba0000, 0x00ba1100,
    0x00ba2100, 0x00ba3300, 0x00ba4400, 0x00ba5400,
    0x00ba6600, 0x00ba7700, 0x00ba8700, 0x00ba9900,
    0x00baaa00, 0x00baba00, 0x00aaba00, 0x0099ba00,
    0x0087ba00, 0x0077ba00, 0x0066ba00, 0x0054ba00,
    0x0044ba00, 0x0033ba00, 0x0021ba00, 0x0011ba00,
    0x00007700, 0x11007700, 0x21007700, 0x33007700,
    0x44007700, 0x54007700, 0x66007700, 0x77007700,
    0x77006600, 0x77005400, 0x77004400, 0x77003300,
    0x77002100, 0x77001100, 0x77000000, 0x77110000,
    0x77210000, 0x77330000, 0x77440000, 0x77540000,
    0x77660000, 0x77770000, 0x66770000, 0x54770000,
    0x44770000, 0x33770000, 0x21770000, 0x11770000,
    0x00770000, 0x00771100, 0x00772100, 0x00773300,
    0x00774400, 0x00775400, 0x00776600, 0x00777700,
    0x00667700, 0x00547700, 0x00447700, 0x00337700,
    0x00217700, 0x00117700, 0x00004400, 0x11004400,
    0x21004400, 0x33004400, 0x44004400, 0x44003300,
    0x44002100, 0x44001100, 0x44000000, 0x44110000,
    0x44210000, 0x44330000, 0x44440000, 0x33440000,
    0x21440000, 0x11440000, 0x00440000, 0x00441100,
    0x00442100, 0x00443300, 0x00444400, 0x00334400,
    0x00214400, 0x00114400, 0x22222200, 0xffffff00
};

SpriteManager::SpriteManager()
    : framebuffer(nullptr)
{

}

SpriteManager::~SpriteManager()
{
    delete framebuffer;
}

bool SpriteManager::Initialize()
{
    framebuffer = new CBcmFrameBuffer(fbWidth, fbHeight, 8, fbWidth, fbHeight*2);
    for(int i = 0; i<256; i++)
    {
        framebuffer->SetPalette32(i, palette[i]);
    }

	if (!framebuffer->Initialize())
    {
		return false;
	}
    return true;
}

// Draws the current frame and presents it.
void SpriteManager::Present()
{
    if(!framebuffer)
    {
        return;
    }

    framebuffer->WaitForVerticalSync();
    framebuffer->SetVirtualOffset(0, flip?fbHeight:0);
    flip = ! flip; // Swap the active screen
}
